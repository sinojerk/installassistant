#!/bin/sh
APPNAME=$0
if ! echo "$0"|grep -q "installassistant"; then
  APPNAME='sh -c "$(curl -fsSL "https://raw.githubusercontent.com/sinojerk/installassistant/main/installassistant")" --'
fi
VERBOSE=0
SEED_SUFFIX_BY_PROGRAM="CustomerSeed:customerseed
DeveloperSeed:seed
PublicSeed:beta
"
OS_SEEDCATALOGS_PLIST='/System/Library/PrivateFrameworks/Seeding.framework/Resources/SeedCatalogs.plist'
show_usage() {
    echo "usage: $APPNAME [-c <catalog-url>] [-s <SeedProgram:CustomerSeed|DeveloperSeed|PublicSeed>] [-v]"
}
invalid_option() {
    echo "$APPNAME: invalid option -- $1"
    show_usage
    exit 1 
}
invalid_argument() {
    echo "$APPNAME: invalid argument -- $1" 
    show_usage
    exit 1
}
system_catalog_url() {
    awk -v prog="<key>$1</key>" '$0~prog{
    getline
    gsub(/.*<string>/, "")
    gsub(/<\/string>.*/, "")
    print
    exit }' "$OS_SEEDCATALOGS_PLIST"
}

selected_catalog_url() {
    if [ -f "$OS_SEEDCATALOGS_PLIST" ]; then
        system_catalog_url $1
    else
    	suffix="$(echo "${SEED_SUFFIX_BY_PROGRAM}"|sed -nE "s|$1:(.*)|\1|p")"
        echo "https://swscan.apple.com/content/catalogs/others/index-12${suffix}-12-10.16-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"
    fi
}

build_app() {
    pkg_path=${1:-"./InstallAssistant.pkg"}
    if [[ ! -f "${pkg_path}" ]]; then
	    echo "file '${pkg_path}' not exist.">&2
	    exit 1
    fi
    if [ 'xar!' != $(head -c 4 ${pkg_path}) ]; then
	    echo "'${pkg_path}' isn't a xar file.">&2
	    exit 1
    fi
    
    [ -e .iatmp ] && rm -rf .iatmp
    [ -e .iatmp.pkg ] && rm -rf .iatmp.pkg

    mkdir .iatmp

    xar --exclude SharedSupport.dmg -C .iatmp -xf "$pkg_path" 2>/dev/null
    if [ $? -ne 0 ]; then
	    echo "fail to extr '${pkg_path}'.">&2
	    exit 1
    fi

    pkgutil --flatten .iatmp .iatmp.pkg
    rm -rf .iatmp
    pkgutil --expand-full .iatmp.pkg .iatmp
    [ ! -d Applications ] && mkdir Applications
    mv .iatmp/Payload/Applications/*.app ./Applications/
    cpio -i < .iatmp/Scripts/Scripts
    rm -rf .iatmp
    
    find "$PWD"/postinstall* -depth 0 -type f | while read -r script;do
        PACKAGE_PATH="${pkg_path}" "$script" "${pkg_path}" "$PWD/" "$PWD/" "$PWD/"
    done
    rm -rf postinstall* .iatmp.pkg
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -s|--seed)
            SEED="$2"
            shift
            shift
            ;;
        -c|--catalog)
            CATALOG="$2"
            shift
            shift
            ;;
        -h|--help)
            show_usage
            exit
            ;;
        -v|--verbose)
            VERBOSE=$((VERBOSE+1))
            shift
            ;;
        build)
            build_app "$2"
            exit
            ;;
        --*)
            invalid_option "${key#--}" 
            ;;
        -*)
            invalid_option "${key#-}"
            ;;
        *)
            invalid_argument "${key}"
            ;;
    esac
done

opseed=${SEED:-"CustomerSeed"}

if [ "$CATALOG" ]; then
    catalog_url="$CATALOG"
else
    if echo ":CustomerSeed:DeveloperSeed:PublicSeed:" | grep -q "${opseed}"; then
        catalog_url="$(selected_catalog_url "$opseed")"
    else
        show_usage
        exit 1
    fi
fi

awk_catalog_parser='
/<key>[0-9]{3}-[0-9]+<\/key>/{
    fkey=1 
    fdict=0
    gsub(/.*<key>/,"")
    gsub(/<\/key>.*/,"")
    key=$0
    next
}
fkey && /<dict>/ {
    fdict++;
    next
}
fkey && /<string>.*InstallAssistant.pkg<\/string>/{
    fia=1
    gsub(/.*<string>/,"")
    gsub(/<\/string>.*/,"")
    ia=$0
    next
}
fia && /<string>.*English.dist<\/string>/ {
    gsub(/.*<string>/,"")
    gsub(/<\/string>.*/,"")
    dist=$0
    next
}
fia && /PostDate/ {
    getline
    gsub(/.*<date>/,"")
    gsub(/[A-Z].*<\/date>.*/,"")
    date=$0
    next
}
fkey && /<\/dict>/ {
    fdict--;
    if (fdict==0) { 
        if (fia) {
            IAINDEX++
            cmd="curl -Ls "dist
            while ((cmd|getline dist_l) > 0) {
                if (dist_l ~/<title>.*<\/title>/) { 
                    gsub(/.*<[^<>\/]+>/, "", dist_l)
                    gsub(/<\/[^<>\/]+>.*/, "", dist_l)
                    title=dist_l
                }
                else if (dist_l ~/<key>BUILD<\/key>/) {
                    (cmd|getline dist_l)
                    gsub(/.*<[^<>\/]+>/, "", dist_l)
                    gsub(/<\/[^<>\/]+>.*/, "", dist_l)
                    build=dist_l
                }
                else if (dist_l ~/<key>VERSION<\/key>/) {
                    (cmd|getline dist_l)
                    gsub(/.*<[^<>\/]+>/, "", dist_l)
                    gsub(/<\/[^<>\/]+>.*/, "", dist_l)
                    version=dist_l
                }
            }
            close(cmd)

            printf "%2d  %-10s  %-8s  %-10s  %-10s  %s\n", IAINDEX, key, version, build, date, title
            if (IAVERBOSE) printf "%s\n\n",ia
        }
        fkey=0
        fia=0
    }
    next
}'

printf "%2s  %-10s  %-8s  %-10s  %-10s  %s\n" "#" "ProductID" "Version" "Build" "Post Date" "Title"
curl -sL "${catalog_url%.gz}"|awk -v IAINDEX="0" -v IAVERBOSE="${VERBOSE}" "${awk_catalog_parser}"

if [ $VERBOSE -gt 0 ]; then
    echo 'Next Steps:'
    echo '  1. download "InstallAssistant.pkg" use your favorite tool such as `curl`, `aria2`, `wget` etc.'
    echo '  2. build "Install macOS xxx.app" with:'
    echo "     $APPNAME build <path_to_InstallAssistant.pkg>"
fi
